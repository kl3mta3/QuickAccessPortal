@page
@model ClientsModel
@{
    ViewData["Title"] = "Clients";
}

<div class="container-fluid">
    <div class="d-flex flex-column flex-grow-1">
        <div class="flex-grow-1">
            <div class="container text-center">

                <h1 class="display-4">Client List</h1>
                <p class="lead">Web Access Portal</p>


                <section style="min-height: 80vh;">
                    <!-- 80% of viewport height -->
                    <div class="card shadow-sm mb-4 h-100">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between align-items-center mb-3 px-3">
                                <h1 class="card-title text-start flex-grow-1 mb-0">Clients</h1>
                                <button type="button" class="btn btn-success px-4 ms-auto" data-bs-toggle="modal" data-bs-target="#addClientModal">
                                    Add Client
                                </button>
                            </div>
                            <div class="d-flex justify-content-between px-3 mb-2 fw-bold text-secondary small">
                                <span style="width: 40%;">Client Name</span>
                                <span style="width: 60%;">KBA URL</span>
                            </div>


                            <div class="list-group overflow-auto" style="max-height: 750px;">
                                @if (Model.ClientNames != null && Model.ClientNames.Any())
                                {
                                    foreach (var entry in Model.ClientNames)
                                    {
                                        <div class="card mb-2 shadow-sm" role="button" onclick="getClientModal2('@entry.Key')" style="cursor: pointer;">
                                            <div class="card-body d-flex justify-content-between align-items-center p-2">
                                                <span class="fw-semibold text-primary" style="width: 30%;">@entry.Key</span>

                                                @if (!string.IsNullOrWhiteSpace(entry.Value))
                                                {
                                                    <a href="@entry.Value" target="_blank"
                                                       class="text-truncate ms-2 text-secondary"
                                                       style="max-width: 60%; display: inline-block;"
                                                       onclick="event.stopPropagation()">
                                                        @entry.Value
                                                    </a>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="list-group-item disabled text-muted">No clients found.</div>
                                }
                            </div>


                        </div>
                    </div>
                </section>
                
                </div>

            </div>

        </div>

    </div>



@*Scripts Below this point *@
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>








@* open Save Client edit *@
<script>
    async function saveClient() {

        const client = {
            ClientName: document.getElementById("clientName2").value,
            KbaUrl: document.getElementById("kbaUrl2").value,
            RemoteLocation: document.getElementById("remoteLocation2").value,
            Timestamp: document.getElementById("timestamp2").value,
            AddedBy: document.getElementById("addedBy2").value
        };


        const res = await fetch('/Dashboard?handler=SaveClient', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(client)
        });

        if (res.ok) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('clientModal2'));
            modal.hide();

         
            showToast(`${client.ClientName} updated successfully`);


            setTimeout(() => location.reload(), 1500);
        } else {
            const errorText = await res.text();
            showToast(`Error: ${errorText}`, true);
        }
    }
</script>




<script>    function showToast(message, isError = false) {
        const toast = document.createElement("div");
        toast.textContent = message;
        toast.style.position = "fixed";
        toast.style.bottom = "20px";
        toast.style.left = "50%";
        toast.style.transform = "translateX(-50%)";
        toast.style.background = isError ? "#dc3545" : "#198754"; // Red or green
        toast.style.color = "#fff";
        toast.style.padding = "10px 20px";
        toast.style.borderRadius = "8px";
        toast.style.boxShadow = "0 0 10px rgba(0,0,0,0.2)";
        toast.style.zIndex = 9999;
        toast.style.transition = "opacity 0.4s ease";
        toast.style.opacity = "1";
        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.opacity = "0";
            setTimeout(() => toast.remove(), 400);
        }, 2500);
    }</script>

<script>
        document.addEventListener('DOMContentLoaded', () => {

        const clientModal = document.getElementById('clientModal2');
        const contentDiv = document.getElementById('clientModalContent2');

        clientModal.addEventListener('hidden.bs.modal', () => {
            contentDiv.innerHTML = "<div class='text-center'>Loading...</div>";
        });
    });


    function getClientModal2(clientName) {
        const modal = new bootstrap.Modal(document.getElementById('clientModal2'));
        const contentDiv2 = document.getElementById('clientModalContent2');
        contentDiv2.innerHTML = "<div class='text-center'>Loading...</div>";

        fetch(`/Clients?handler=ClientModal2&target=${clientName}`)
            .then(res => res.text())
            .then(html => {
                contentDiv2.innerHTML = html;
                document.getElementById("clientModalLabel2").innerText = `Edit – ${clientName}`;
                modal.show();
            })
            .catch(() => {
                contentDiv.innerHTML = "<p class='text-danger'>Failed to load client info.</p>";
            });

    }
</script>

<script>
    async function addClient() {

        console.log("Adding Client...");
        const client = {
            ClientName: document.getElementById("clientName").value,
            KbaUrl: document.getElementById("kbaUrl").value,
            RemoteLocation: document.getElementById("remoteLocation").value,
            AddedBy: document.getElementById("addedBy").value
        };


       

        const res = await fetch('/Dashboard?handler=AddClient', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(client)
        });

        if (res.ok) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('addClientModal2'));
            modal.hide();

            showToast(`Client "${client.ClientName}" added successfully!`);

            setTimeout(() => location.reload(), 1500);
        } else {
            const errorText = await res.text();
            showToast(`Error saving alert: ${errorText}`, true);
        }
    }
</script>