@page
@model AlertsModel
@{
    ViewData["Title"] = "Alerts";
}

<div class="container-fluid">
    <div class="d-flex flex-column flex-grow-1">
        <div class="flex-grow-1">
            <div class="container text-center">

                <h1 class="display-4">Admin Dashboard</h1>
                <p class="lead">Web Access Portal</p>
                <section style="min-height: 80vh;">
                    <div class="card shadow-sm mb-4 h-100">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between align-items-center mb-3 px-3">
                                <h1 class="card-title text-start flex-grow-1 mb-0">Alerts</h1>
                                <div class="d-flex justify-content-center px-5 mb-2">
                                    <span class="fw-medium">Total Alerts:</span>
                                    <span class="text-success fw-bold ms-2">@Model.TotalAlerts</span>
                                </div>
                            </div>
                                @{
                                    string currentSort = Request.Query["sortBy"];
                                    string currentDir = Request.Query["sortDir"];
                                    Func<string, string> getNextDir = column =>
                                        currentSort == column && currentDir == "asc" ? "desc" : "asc";
                                }

                            <div class="d-flex justify-content-between px-3 mb-1 fw-bold text-secondary small">
                                <a href="?sortBy=status&sortDir=@getNextDir("status")" class="sortable-header" style="width: 15%;">Status</a>
                                <a href="?sortBy=client&sortDir=@getNextDir("client")" class="sortable-header" style="width: 20%;">Client</a>
                                <a href="?sortBy=elapsed&sortDir=@getNextDir("elapsed")" class="sortable-header" style="width: 15%;">Elapsed</a>
                                <span style="width: 50%;">Message</span>
                            </div>

                            <div class="list-group overflow-auto" style="max-height: 750px;">
                                @if (Model.CurrentAlerts != null && Model.CurrentAlerts.Any())
                                {
                                    foreach (var alert in Model.CurrentAlerts)
                                    {
                                        var openedTime = DateTime.TryParse(
                                        alert.AddedOn,
                                        null,
                                        System.Globalization.DateTimeStyles.AdjustToUniversal | System.Globalization.DateTimeStyles.AssumeUniversal,
                                        out var added)
                                        ? $"{(DateTime.UtcNow - added).TotalMinutes:N0} min"
                                        : "N/A";

                                        <div class="card mb-2 shadow-sm" role="button" onclick="getAlertModal2('@alert.AlertID')" style="cursor: pointer;">
                                            <div class="card-body p-2">
                                                <div class="d-flex justify-content-between align-items-center flex-wrap">
                                                    <span class="fw-bold text-primary" style="width: 15%;">@alert.Status</span>
                                                    <span class="text-dark" style="width: 20%;">@alert.ClientName</span>
                                                    <span class="text-muted" style="width: 15%;">@openedTime</span>
                                                    <span class="text-truncate text-secondary" style="width: 45%;">@alert.Message?.Split('\n').FirstOrDefault()</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="list-group-item disabled text-muted">No alerts found.</div>
                                }
                            </div>
                        </div>
                    </div>
                </section>
                </div>

            </div>

        </div>

    </div>



@*Scripts Below this point *@
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>




<script>    function showToast(message, isError = false) {
        const toast = document.createElement("div");
        toast.textContent = message;
        toast.style.position = "fixed";
        toast.style.bottom = "20px";
        toast.style.left = "50%";
        toast.style.transform = "translateX(-50%)";
        toast.style.background = isError ? "#dc3545" : "#198754"; // Red or green
        toast.style.color = "#fff";
        toast.style.padding = "10px 20px";
        toast.style.borderRadius = "8px";
        toast.style.boxShadow = "0 0 10px rgba(0,0,0,0.2)";
        toast.style.zIndex = 9999;
        toast.style.transition = "opacity 0.4s ease";
        toast.style.opacity = "1";
        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.opacity = "0";
            setTimeout(() => toast.remove(), 400);
        }, 2500);
    }</script>

<script>
    async function getAlertModal2(alertId) {
        const modal = new bootstrap.Modal(document.getElementById('alertModal2'));
        const modalContent = document.querySelector('#alertModal2 .modal-body');
        modalContent.innerHTML = "<div class='text-center'>Loading...</div>";

        try {
            const res = await fetch(`/Alerts?handler=AlertModal2&id=${alertId}`);
            const html = await res.text();
            modalContent.innerHTML = html;
            modal.show();
        } catch (error) {
            modalContent.innerHTML = "<p class='text-danger'>Failed to load alert data.</p>";
            console.error("Modal load failed:", error);
        }
    }
</script>

<script>
    async function resolveAlert2() {

        const alert = {
            AlertID: document.getElementById("alertId2").value,
            ClientName: document.getElementById("alertClientName2").value,
            Status: document.getElementById("alertStatus2").value,
            Resolution: document.getElementById("alertResolution2").value,
            Message: document.getElementById("alertMessage2").value
        };

        const res = await fetch('/Dashboard?handler=SaveAlert', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(alert)
        });

        if (res.ok) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('alertModal2'));
            modal.hide();

            showToast(`Alert for ${alert.ClientName} saved successfully`);

            setTimeout(() => location.reload(), 1500);
        } else {
            const errorText = await res.text();
            showToast(`Error saving alert: ${errorText}`, true);
        }
    }
</script>

