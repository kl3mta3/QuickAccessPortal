@page
@model UsersModel
@{
    ViewData["Title"] = "Users";
   
}

<div class="container-fluid">
    <div class="d-flex flex-column flex-grow-1">
        <div class="flex-grow-1">
            <div class="container text-center">

                <h1 class="display-4">Users</h1>
                <p class="lead">Web Access Portal</p>


                <section style="min-height: 80vh;">
                    <!-- 80% of viewport height -->
                    <div class="card shadow-sm mb-4 h-100">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between align-items-center mb-3 px-3">
                                <h1 class="card-title text-start flex-grow-1 mb-0">Users</h1>
                                <button type="button" class="btn btn-success px-4 ms-auto" data-bs-toggle="modal" data-bs-target="#addUserModal">
                                    Add User
                                </button>
                            </div>
                            <div class="d-flex justify-content-between px-3 mb-2 fw-bold text-secondary small">
                                <span style="width: 33%;">Name</span>
                                <span style="width: 33%;">Username</span>
                                <span style="width: 33%;">Is Admin</span>

                            </div>


                            <div class="list-group overflow-auto" style="max-height: 750px;">
                                @if (Model.Users != null && Model.Users.Any())
                                {
                                    foreach (var user in Model.Users)
                                    {

                                        <div class="card mb-2 shadow-sm" role="button" onclick="getUserModal('@user.Username')" style="cursor: pointer;">

                                            <div class="card-body p-2">
                                                <div class="d-flex justify-content-between align-items-center flex-wrap">
                                                    <span class="fw-bold text-primary" style="width: 33%;">@user.Name</span>
                                                    <span class="text-dark" style="width: 33%;">@user.Username</span>
                                                    <span class="text-muted" style="width: 33%;">@user.IsAdmin</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="list-group-item disabled text-muted">No Users found.</div>
                                }
                            </div>


                        </div>
                    </div>
                </section>
                
                </div>

            </div>

        </div>

    </div>

<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-light text-dark shadow-sm">
            <div class="modal-header">
                <h5 class="modal-title" id="changePasswordModalLabel">Reset Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="container-md text-start">
                    <h2>Reset Password</h2>

                    <form id="addUser">
                        <div class="mb-3">
                            <label for="newPassword" class="form-label text-dark">New Password</label>
                            <input type="text" class="form-control" id="newPassword" placeholder="Enter New Password" required>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPass" class="form-label text-dark">Confirm Password</label>
                            <input type="text" class="form-control" id="confirmPass" placeholder="Re-enter New Password" required>
                        </div>
                        <div class="mb-3">
                        <p>"Password must be 8-24 characters, and include uppercase, lowercase, and a number."</p>
                        </div>
                        <button type="submit" class="btn btn-primary w-100" onclick="resetPassword(event)">Reset Password</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@*Scripts Below this point *@
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>








@* open Save Client edit *@
<script>
    async function saveUser() {
        const user = {
            Username: document.getElementById("username").value,
            Name: document.getElementById("name").value,
            IsAdmin: document.getElementById("isAdmin").value === "true" || document.getElementById("isAdmin").checked
        };


        const originalUsername = document.getElementById("originalUsername").value;


        const res = await fetch(`/Users?handler=SaveUser&originalUsername=${encodeURIComponent(originalUsername)}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(user)
        });

        if (res.ok) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('userModal'));
            modal.hide();

            showToast(`${user.Username} updated successfully`);

            setTimeout(() => location.reload(), 1500);
        } else {
            const errorText = await res.text();
            showToast(`Error: ${errorText}`, true);
        }
    }
</script>




<script>    function showToast(message, isError = false) {
        const toast = document.createElement("div");
        toast.textContent = message;
        toast.style.position = "fixed";
        toast.style.bottom = "20px";
        toast.style.left = "50%";
        toast.style.transform = "translateX(-50%)";
        toast.style.background = isError ? "#dc3545" : "#198754"; // Red or green
        toast.style.color = "#fff";
        toast.style.padding = "10px 20px";
        toast.style.borderRadius = "8px";
        toast.style.boxShadow = "0 0 10px rgba(0,0,0,0.2)";
        toast.style.zIndex = 9999;
        toast.style.transition = "opacity 0.4s ease";
        toast.style.opacity = "1";
        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.opacity = "0";
            setTimeout(() => toast.remove(), 400);
        }, 2500);
    }</script>

<script>
        document.addEventListener('DOMContentLoaded', () => {

        const userModal = document.getElementById('userModal');
        const contentDiv = document.getElementById('userModalContent');

        userModal.addEventListener('hidden.bs.modal', () => {
            contentDiv.innerHTML = "<div class='text-center'>Loading...</div>";
        });
    });


    function getUserModal(username) {
        const modal = new bootstrap.Modal(document.getElementById('userModal'));
        const contentDiv = document.getElementById('userModalContent');
        contentDiv.innerHTML = "<div class='text-center'>Loading...</div>";

    fetch(`/Users?handler=UserModal&username=${username}`)
            .then(res => res.text())
            .then(html => {
                contentDiv.innerHTML = html;
                document.getElementById("userModalLabel").innerText = `Edit – ${username}`;
                modal.show();
            })
            .catch(() => {
                contentDiv.innerHTML = "<p class='text-danger'>Failed to load user info.</p>";
            });

    }
</script>

<script>
    async function addUser(event) {
        event.preventDefault(); 

        const user = {
            Username: document.getElementById("username").value,
            Name: document.getElementById("name").value,
            IsAdmin: document.getElementById("isAdmin").checked,
        };

        const password = document.getElementById("password").value;


        if (
        password.length < 8 ||
        password.length > 24 ||
        !/[A-Z]/.test(password) ||
        !/[a-z]/.test(password) ||
        !/[0-9]/.test(password)
        ) {
        showToast("Password must be 8-24 characters, and include uppercase, lowercase, and a number.", true);
        return;
        }

        const payload = {
            User: user,
            Password: password
        };

        const res = await fetch('/Users?handler=AddUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });

        if (res.ok) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));
            modal.hide();

            showToast(`User "${user.Username}" added successfully!`);
            setTimeout(() => location.reload(), 800);
        } else {
            const errorText = await res.text();
            showToast(`Error saving user: ${errorText}`, true);
        }
    }
</script>





<script>
    let pendingUsernameToChange = null;

    function changePassword(username) {
        pendingUsernameToChange = username;

        const userModalEl = document.getElementById('userModal');
        const userModalInstance = bootstrap.Modal.getInstance(userModalEl);
        if (userModalInstance) {
            userModalInstance.hide();
        }


        const passwordModal = new bootstrap.Modal(document.getElementById('changePasswordModal'));
        passwordModal.show();
    }

    document.addEventListener('click', (event) => {
        if (event.target && event.target.id === 'confirmPasswordChangeBtn') {
            if (!pendingUsernameToChange) return;

            const newPassword = document.getElementById('newPassword').value;
            const payload = {
                username: pendingUsernameToChange,
                newPassword: newPassword
            };

            fetch(`/Users?handler=ChangePassword`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            })
            .then(response => {
                if (response.ok) {
                    const confirmModalEl = document.getElementById('confirmPasswordChangeModal');
                    const modalInstance = bootstrap.Modal.getInstance(confirmModalEl);
                    if (modalInstance) modalInstance.hide();

                    setTimeout(() => location.reload(), 500);
                } else {
                    response.text().then(txt => console.error("Server responded with error:", txt));
                    showToast("Error changing password.", true);
                }
            })
            .catch(err => {
                console.error("Error changing password:", err);
                showToast("Something went wrong.", true);
            });
        }
    });
</script>
<script>
    function resetPassword(event) {
        event.preventDefault(); // prevent form submission refresh

        const newPass = document.getElementById("newPassword").value;
        const confirmPass = document.getElementById("confirmPass").value;

        if (newPass !== confirmPass) {
            showToast("Passwords do not match!", true);
            return;
        }

        if (!pendingUsernameToChange) {
            showToast("No user selected for password change.", true);
            return;
        }
         
        if (
        newPass.length < 8 ||
        newPass.length > 24 ||
        !/[A-Z]/.test(newPass) ||
        !/[a-z]/.test(newPass) ||
        !/[0-9]/.test(newPass) 
        ) {
        showToast("Password must be 8-24 characters, and include uppercase, lowercase, and a number.", true);
        return;
        }
        }

        const payload = {
            username: pendingUsernameToChange,
            newPassword: newPass
        };

        fetch(`/Users?handler=ChangePassword`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        })
        .then(response => {
            if (response.ok) {
                const modalEl = document.getElementById('changePasswordModal');
                const modalInstance = bootstrap.Modal.getInstance(modalEl);
                if (modalInstance) modalInstance.hide();

                showToast("Password changed successfully!");
                setTimeout(() => location.reload(), 800);
            } else {
                response.text().then(txt => console.error("Server responded with error:", txt));
                showToast("Error changing password.", true);
            }
        })
        .catch(err => {
            console.error("Error changing password:", err);
            showToast("Something went wrong.", true);
        });
    }
</script>

<script>
    function showErrorModal() {
    const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
    errorModal.show();
    }
</script>